(let
  [not (fn [pred] (if pred false true))]
  [null? (fn [pred ](if (eq? pred []) true false))]
  [first car]
  [next cdr]
  [second (fn [lst] (first (next lst)))]
  [list (fn [objs] objs)]
  [id (fn [arg] arg)]
  [flip (fn [func] (fn [arg1 arg2] (func arg2 arg1)))]
  [compose (fn [f g] (fn [arg] (f (g arg))))]
  [foldr (fn [func end lst]
    (if (null? lst)
        end
        (func (car lst) (foldr func end (cdr lst)))))]
  [foldl (fn [func accum lst]
    (if (null? lst)
        accum
        (foldl func (func accum (car lst)) (cdr lst))))]
  [fold1 (fn [func lst] (foldl func (car lst) (cdr lst)))]
  [last (fn [lst] (fold1 (fn [acc stmt] stmt) lst))]
  [unfold (fn [func init pred]
    (if (pred init)
        (cons init [])
        (cons init (unfold func (func init) pred))))]
  [max (fn [first rest] (foldl (fn [old new] (if (> old new) old new)) first rest))]
  [min (fn [first rest] (foldl (fn [old new] (if (< old new) old new)) first rest))]
  [length (fn [lst] (foldl (fn [x y] (+ x 1)) 0 lst))]
  [reverse (fn [lst] (foldl (flip cons) [] lst))]
  [map (fn [func lst] (foldr (fn [x y] (cons (func x) y)) [] lst))]
  [filter (fn [pred lst] (foldr (fn [x y] (if (pred x) (cons x y) y)) [] lst))]
  [complement (fn [func] (fn [v] (not (func v))))]
  [remove (fn [pred lst] (filter (complement pred) lst))]
  [append (fn [l1 l2] (foldr cons l2 l1))]
  [io.dump (fn [v] (io.write (string.from v)))]
  (do
    (io.dump (foldr id 1 [3 2 4]))
    (io.dump (filter (fn [n] (< 5 n)) [1 3 5 7]))
    (io.dump (remove (fn [n] (< 5 n)) [1 3 5 7]))
    (io.dump (reverse [1 3 5 7]))
    (io.dump (unfold (compose (fn [n] (+ n 1)) (fn [n] (- n 2))) 10 (fn [n] (> 5 n))))
    ))